{
  "components": {
    "Merchant/widget/view": {
      "code": "const USER = \"knwtechs.near\";\n\nconst factoryAddress = props.factory;\nconst Container = styled.div`\n    background-color: #1c1f2a;\n    padding: 2rem 2rem\n`;\n\nState.init({\n  collections: [],\n});\n\nconst collectionABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsCollection.sol/SubscriptionsCollection.json\"\n);\nif (!collectionABI.ok) {\n  return \"Contract unavailable.\";\n}\n\nconst factoryABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsFactory.sol/SubscriptionsFactory.json\"\n);\nif (!factoryABI.ok) {\n  return \"Contract unavailable.\";\n}\n\nif (!Ethers.provider()) {\n  return (\n    <div class=\"row d-flex justify-content-center pt-4\">\n      <div class=\"col-8 col-md-4 text-center\">\n        <Web3Connect connectLabel=\"Connect with Web3\" />\n      </div>\n    </div>\n  );\n}\n\nconst subscriptionsFactoryContract = new ethers.Contract(\n  factoryAddress,\n  JSON.parse(factoryABI.body)[\"abi\"],\n  Ethers.provider().getSigner()\n);\n\nconst getMerchantCollections = (merchant) => {\n  const filter = {\n    address: factoryAddress,\n    topics: [\n      ethers.utils.id(\n        \"NewCollectionCreated(string,address,uint256[],int256[],uint256,address,string,uint256)\"\n      ),\n      null,\n      ethers.utils.hexZeroPad(ethers.utils.getAddress(merchant), 32),\n    ],\n    fromBlock: 0,\n    toBlock: \"latest\",\n  };\n  Ethers.provider()\n    .getLogs(filter)\n    .then((logs) => {\n      const collections = [];\n      for (let i = 1; i < logs.length; i++) {\n        console.log(subscriptionsFactoryContract.interface.parseLog(logs[i]));\n        const collectionAddress =\n          subscriptionsFactoryContract.interface.parseLog(logs[i]).args[1];\n        collections.push(collectionAddress);\n      }\n      State.update({ collections: collections });\n      console.log(collections);\n    })\n    .catch((err) => console.log(err));\n};\n\nif (Ethers.provider()) {\n  getMerchantCollections(props.merchant);\n} else return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nreturn (\n  <Container>\n    <div class=\"table-responsive\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\" class=\"text-white\">\n              Icon\n            </th>\n            <th scope=\"col\" class=\"text-white\">\n              Name\n            </th>\n            <th scope=\"col\" class=\"text-white\">\n              Supply\n            </th>\n            <th scope=\"col\" class=\"text-white\">\n              Max Supply\n            </th>\n            <th scope=\"col\" class=\"text-white\">\n              Price\n            </th>\n            <th scope=\"col\" class=\"text-white\">\n              Total earnings\n            </th>\n            <th scope=\"col\" class=\"text-white\">\n              Date created\n            </th>\n            <th scope=\"col\" class=\"text-white text-center\">\n              SDK\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {state.collections.map((e) => (\n            <Widget\n              src={`${USER}/widget/Merchant.info`}\n              props={{\n                collectionAddress: e,\n                abi: JSON.parse(collectionABI.body)[\"abi\"],\n                sender: state.sender,\n              }}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  </Container>\n);"
    },
    "Merchant/widget/create": {
      "code": "// STYLED\nconst APP_TITLE = \"SubScript.io\";\nconst USER = \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd\";\n\nif (!props.factory) {\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: \"Factory address missing\" }}\n    />\n  );\n}\nconst contractAddress = props.factory;\n\nconst Box = styled.div`\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\ngap: 0.5em;\n\n\nbutton {\nborder: none;\nbackground: none;\npadding: 0;\nwidth: 1.5em;\nheight: 1.5em;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nborder: 1.5px solid #a8acb3;\ntransition: background 200ms ease-out;\noutline: none!important;\n\n\n&[data-state=\"checked\"] {\nbackground: #a59bdb;\n}\n}\n`;\n\nconst Container = styled.div`\nbackground-color: #1c1f2a;\n`;\n\nconst Heading = styled.h1`\ntext-align: center;\ncolor: #8f73ff;\nfont-weight: 700;\nfont-size: 24pt;\nletter-spacing: 3pt;\ntext-transform: uppercase;\ndisplay: flex;\njustify-content: center;\npadding-top: 10px\n`;\n\nconst MainCard = styled.div`\nborder: 2px solid rgba(255,255,255,.7);\nborder-radius: 25px;\nbackground-color: #1c1f2a;\npadding: 2rem;\nwidth: 32rem\n`;\n\nconst factoryABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsFactory.sol/SubscriptionsFactory.json\"\n);\n\nif (!factoryABI.ok) {\n  console.log(\"ABI unavailable.\");\n  return \"ABI unavailable.\";\n}\n\n// INIT STATE\nState.init({\n  product_name,\n  timeframe,\n  uri,\n  startTimestamp,\n  price: 0,\n  usdPrice: 0,\n  supply: -1,\n  cap_supply: false,\n  metadata: null,\n  waiting: false,\n  collectionCreated: null,\n});\n\nif (!state.supply) {\n  State.update({ supply: -1 });\n}\n\nif (!state.cap_supply) {\n  State.update({ cap_supply: false });\n}\n\n// PRODUCT NAME\nconst onNameChange = ({ target }) => {\n  State.update({ product_name: target.value });\n};\nconst validateName = () => {\n  return state.product_name.length > 0;\n};\n\n// TIMEFRAME\nconst onTimeframeChange = ({ target }) => {\n  State.update({ timeframe: target.value });\n};\nconst validateTimeframe = () => {\n  return state.timeframe >= 1;\n};\n\n// URI\nconst onUriChange = ({ target }) => {\n  State.update({ uri: target.value });\n};\nconst validateUri = () => {\n  return state.uri.length > 0;\n};\n\n// START TIMESTAMP\nconst onStartTimestampChange = ({ target }) => {\n  console.log(target.value);\n  State.update({ startTimestamp: target.value });\n};\nconst validateStartTimestamp = () => {\n  const timestamp = new Date(state.startTimestamp).getTime();\n  return timestamp >= 0;\n};\n\n// PRICE\nconst onPriceChange = ({ target }) => {\n  State.update({\n    price: target.value,\n    usdPrice: (target.value * state.ethusd).toFixed(2),\n  });\n};\nconst validatePrice = () => {\n  return state.price > 0;\n};\n\n// SUPPLY\nconst onCheckboxChange = (checked) => {\n  State.update({ cap_supply: checked, supply: checked ? 5000 : -1 });\n};\nconst onSupplyChange = ({ target }) => {\n  State.update({ supply: target.value });\n};\nconst validateSupply = () => {\n  return state.supply >= -1;\n};\n\nconst isFormValid = () => {\n  console.log({\n    name: state.product_name,\n    price: state.price,\n    timeframe: state.timeframe,\n    uri: state.uri,\n    cap_supply: state.cap_supply,\n    supply: state.supply,\n  });\n\n  return (\n    (state.product_name.length > 0 &&\n      state.price > 0 &&\n      state.timeframe > 0 &&\n      state.uri.length > 0 &&\n      state.sender.length > 0 &&\n      state.cap_supply &&\n      state.supply >= -1) ||\n    (!state.cap_supply && state.supply == -1)\n  );\n};\n\n// CONTRACT INTERACTION\nconst createCollection = async () => {\n  if (isFormValid()) {\n    console.log(\"form valid, performing contract call.\");\n\n    try {\n      // CREATE JSON METADATA\n      const jsonData = {\n        name: state.product_name,\n        description: \"SubScript.io\",\n        image: state.uri,\n        external_url: \"\",\n        attributes: [],\n      };\n\n      const jsonString = JSON.stringify(jsonData, null, 2);\n\n      asyncFetch(\"https://ipfs.near.social/add\", {\n        method: \"POST\",\n        headers: { Accept: \"application/json\" },\n        body: jsonString,\n      }).then((res) => {\n        console.log(\"Upload result: \", res);\n        const cid = res.body.cid;\n        const meta_uri = `https://ipfs.near.social/ipfs/${cid}`;\n        console.log(\"Meta URI: \", meta_uri);\n\n        const amount = Big(state.price).mul(Big(10).pow(18)).toString();\n        const start = Big(\n          Math.floor(new Date(state.startTimestamp).getTime() / 1000)\n        ).toString();\n        const frame = Big(state.timeframe).mul(86400).toString();\n\n        console.log(\"Amount: \", amount);\n        console.log(\"Start: \", start);\n        console.log(\"Frame: \", frame);\n        console.log(\"Sender: \", props.sender);\n        console.log(\"Supply: \", Big(state.supply).toString());\n\n        const subscriptionsFactoryContract = new ethers.Contract(\n          contractAddress,\n          JSON.parse(factoryABI.body)[\"abi\"],\n          Ethers.provider().getSigner()\n        );\n\n        State.update({ waiting: true });\n        subscriptionsFactoryContract\n          .createCollection(\n            state.product_name,\n            [amount],\n            [Big(state.supply).toString()],\n            frame,\n            props.sender,\n            meta_uri,\n            start\n          )\n          .catch((err) => {\n            console.log(err);\n            State.update({ waiting: false });\n          })\n          .then((tx) => {\n            console.log(\"Waiting for confirmation: \", tx);\n            tx.wait().then((hash) => {\n              State.update({\n                waiting: false,\n                collectionCreated: hash.events[0].address,\n              });\n            });\n          });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  } else {\n    console.log(\"form not ready\");\n  }\n};\n\n// ETH/USD PRICE\nconst cg_ethusd = fetch(\n  \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\",\n  {\n    mode: \"no-cors\",\n  }\n);\nif (!cg_ethusd.ok) {\n  /*return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: `PRICE_API ${cg_ethusd.error}` }}\n    />\n  );\n  */\n  if (!state.ethusd) {\n    State.update({ ethusd: 1800 });\n  }\n} else {\n  if (!state.ethusd) {\n    State.update({ ethusd: cg_ethusd[\"ethereum\"][\"usd\"] });\n  }\n}\n\nreturn (\n  <Container>\n    <div class=\"row d-flex justify-content-center w-100\">\n      <Heading class=\"my-5\">{APP_TITLE}</Heading>\n      <p class=\"text-light text-center font-italic\">\n        Handling subscriptions with ERC-1155 it&apos;s never been that easy.\n      </p>\n    </div>\n\n    {state.collectionCreated && (\n      <div class=\"row d-flex justify-content-center w-100\">\n        <div class=\"alert alert-success\" role=\"alert\">\n          Product successfully created! Check it&nbsp;\n          <a href={`${USER}/widget/Merchant.view?merchant=${props.sender}`}>\n            here\n          </a>\n          !\n        </div>\n      </div>\n    )}\n\n    <div class=\"row d-flex justify-content-center\">\n      <MainCard onSubmit={handleSubmit}>\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col\">\n            <h2 class=\"text-white text-center\">Create a new product</h2>\n          </div>\n        </div>\n        {/* PRODUCT NAME */}\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col-12\">\n            <div class=\"form-group\">\n              <label for=\"product_name\" class=\"text-white\">\n                Product Name\n              </label>\n              <input\n                type=\"text\"\n                value={state.product_name}\n                onChange={onNameChange}\n                class=\"form-control\"\n                id=\"product_name\"\n                placeholder=\"Netflix\"\n                active={\n                  !state.product_name\n                    ? \"blank\"\n                    : validateName()\n                    ? \"valid\"\n                    : \"invalid\"\n                }\n              />\n            </div>\n          </div>\n        </div>\n        {/* PRODUCT PRICE + TIMEFRAME */}\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col-6\">\n            <div class=\"form-group\">\n              <label for=\"price\" class=\"text-white\">\n                Recurrent price\n              </label>\n\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <span class=\"input-group-text\" id=\"basic-addon1\">\n                    Ξ\n                  </span>\n                </div>\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  value={state.price}\n                  onChange={onPriceChange}\n                  id=\"price\"\n                  placeholder=\"0.011\"\n                  active={\n                    !state.price\n                      ? \"blank\"\n                      : validatePrice()\n                      ? \"valid\"\n                      : \"invalid\"\n                  }\n                />\n                <div class=\"input-group-append\">\n                  <span class=\"input-group-text\">{state.usdPrice} $</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-6\">\n            <div class=\"form-group\">\n              <label for=\"timeframe\" class=\"text-white\">\n                Billing period\n              </label>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"number\"\n                  class=\"form-control\"\n                  value={state.timeframe}\n                  onChange={onTimeframeChange}\n                  step={1}\n                  id=\"timeframe\"\n                  placeholder=\"30\"\n                  active={\n                    !state.price\n                      ? \"blank\"\n                      : validateTimeframe()\n                      ? \"valid\"\n                      : \"invalid\"\n                  }\n                />\n                <div class=\"input-group-append\">\n                  <span class=\"input-group-text\" id=\"basic-addon1\">\n                    Days\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* URI */}\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col-12\">\n            <div class=\"form-group\">\n              <label for=\"uri\" class=\"text-white\">\n                Image URI\n              </label>\n              <OverlayTrigger\n                key={placement}\n                placement={placement}\n                overlay={\n                  <Tooltip id={`tooltip-${placement}`}>\n                    Subscription tokens will have this image.\n                  </Tooltip>\n                }\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"16\"\n                  height=\"16\"\n                  fill=\"white\"\n                  class=\"bi bi-info-circle\"\n                  viewBox=\"0 0 16 16\"\n                >\n                  <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\" />\n                  <path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\" />\n                </svg>\n              </OverlayTrigger>\n\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                value={state.uri}\n                onChange={onUriChange}\n                id=\"uri\"\n                name=\"uri\"\n                placeholder=\"ipfs://.../my_image.png\"\n                active={\n                  !state.uri ? \"blank\" : validateUri() ? \"valid\" : \"invalid\"\n                }\n              />\n            </div>\n          </div>\n        </div>\n        {/* START TIMESTAMP */}\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col-12\">\n            <div class=\"form-group\">\n              <label for=\"startTimestamp\" class=\"text-white\">\n                Mint starts at\n              </label>\n              <input\n                type=\"datetime-local\"\n                class=\"form-control\"\n                value={state.startTimestamp}\n                onChange={onStartTimestampChange}\n                id=\"startTimestamp\"\n                active={\n                  !state.startTimestamp\n                    ? \"blank\"\n                    : validateStartTimestamp()\n                    ? \"valid\"\n                    : \"invalid\"\n                }\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* SUPPLY CHECKBOX */}\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col-12\">\n            <div class=\"form-check px-0\">\n              <Box>\n                <Checkbox.Root\n                  checked={state.cap_supply}\n                  onCheckedChange={onCheckboxChange}\n                  id={\"cap_supply_checkbox\"}\n                >\n                  <Checkbox.Indicator>\n                    <svg\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 15 15\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z\"\n                        fill=\"currentColor\"\n                        fill-rule=\"evenodd\"\n                        clip-rule=\"evenodd\"\n                      ></path>\n                    </svg>\n                  </Checkbox.Indicator>\n                </Checkbox.Root>\n                <span htmlFor={\"cap_supply_checkbox\"} class=\"text-white\">\n                  I want to cap the token supply\n                </span>\n              </Box>\n            </div>\n          </div>\n        </div>\n\n        {/* MAX SUPPLY */}\n        {state.cap_supply && (\n          <div class=\"row d-flex justify-content-center mt-2\">\n            <div class=\"col-12\">\n              <div class=\"form-group\">\n                <input\n                  type=\"number\"\n                  value={state.supply}\n                  onChange={onSupplyChange}\n                  class=\"form-control\"\n                  id=\"supply\"\n                  placeholder=\"5000\"\n                  active={\n                    !state.supply\n                      ? \"blank\"\n                      : validateSupply()\n                      ? \"valid\"\n                      : \"invalid\"\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* SUBMIT */}\n        <div class=\"row d-flex justify-content-center mt-2\">\n          <div class=\"col-12 text-center\">\n            {Ethers.provider() ? (\n              <button\n                class=\"btn btn-secondary btn-block\"\n                style={{ fontWeight: 500, minWidth: \"10vw\" }}\n                type=\"submit\"\n                onClick={createCollection}\n                disabled={!isFormValid || state.waiting}\n              >\n                {state.waiting ? (\n                  <div class=\"spinner-border text-light\" role=\"status\"></div>\n                ) : (\n                  \"Create Product\"\n                )}\n              </button>\n            ) : (\n              <Web3Connect connectLabel=\"Connect with Web3\" />\n            )}\n          </div>\n        </div>\n      </MainCard>\n    </div>\n  </Container>\n);\n"
    },
    "Merchant/widget/info": {
      "code": "if (!props.collectionAddress || !props.abi) {\n  return (\n    <tr>\n      <td colspan=\"6\" class=\"text-white\">\n        Data unavailable\n      </td>\n    </tr>\n  );\n}\n\nconst contract = props.collectionAddress;\nconst abi = props.abi;\n\nconst iface = new ethers.utils.Interface(abi);\n\nconst collectionContract = new ethers.Contract(\n  contract,\n  abi,\n  Ethers.provider().getSigner()\n);\n\nState.init({\n  circulating_supply: 0,\n  max_supply: 0,\n  price: 0,\n  total_earnings: 0,\n  uri: \"\",\n});\n\nconst getTotalEarnings = () => {\n  const tierValue = 0;\n  const tierHex = \"0x\" + tierValue.toString(16).padStart(64, \"0\");\n  const filter = {\n    address: props.collectionAddress,\n    topics: [\n      ethers.utils.id(\"SubscriptionUpdate(uint256,address,uint256)\"),\n      tierHex,\n    ],\n    fromBlock: 0,\n    toBlock: \"latest\",\n  };\n  Ethers.provider()\n    .getLogs(filter)\n    .then((logs) => {\n      const tot = state.price * logs.length;\n      State.update({ total_earnings: tot });\n    })\n    .catch((err) => console.log(err));\n};\n\nconst getCirculatingSupply = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierSupply\", [0, false]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((circulating) => {\n      const circulating_supply = iface\n        .decodeFunctionResult(\"getTierSupply\", circulating)\n        .toString();\n      State.update({ circulating_supply: circulating_supply });\n    });\n};\n\nconst getMaxSupply = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierSupply\", [0, true]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((total) => {\n      const max_supply = iface\n        .decodeFunctionResult(\"getTierSupply\", total)\n        .toString();\n      State.update({ max_supply: max_supply == -1 ? \"-\" : max_supply });\n    });\n};\n\nconst getCollectionName = () => {\n  const encodedData = iface.encodeFunctionData(\"collectionName\", []);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((n) => {\n      const name = iface.decodeFunctionResult(\"collectionName\", n)[0];\n      State.update({ name: name });\n    });\n};\n\nconst getCollectionImage = () => {\n  try {\n    const encodedData = iface.encodeFunctionData(\"uri\", [0]);\n\n    return Ethers.provider()\n      .call({\n        to: contract,\n        data: encodedData,\n      })\n      .then((url) => {\n        const uri = iface.decodeFunctionResult(\"uri\", url);\n        const real_uri = uri[0].slice(0, uri[0].length - 1);\n        const metas = fetch(real_uri);\n        if (metas.ok) {\n          const jsonmeta = metas.body;\n          State.update({ uri: jsonmeta.image });\n        } else {\n          console.log(metas);\n        }\n      });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getPrice = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierPrice\", [0]);\n\n  return Ethers.provider()\n    .call({\n      to: contract,\n      data: encodedData,\n    })\n    .then((p) => {\n      const price = iface.decodeFunctionResult(\"getTierPrice\", p);\n      const _price = Big(price.toString()).div(Big(10).pow(18)).toString();\n      State.update({ price: _price });\n    });\n};\n\nif (Ethers.provider()) {\n  getTotalEarnings();\n  getCirculatingSupply();\n  getMaxSupply();\n  getCollectionName();\n  getPrice();\n  getCollectionImage();\n} else return <Web3Connect connectLabel=\"Connect with Web3\" />;\n\nreturn (\n  <tr>\n    <th scope=\"row\" class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      <img src={state.uri} class=\"img-fluid\" style={{ maxWidth: \"5vw\" }} />\n    </th>\n    <th class=\"text-white align-center\" style={{ verticalAlign: \"middle\" }}>\n      {state.name}\n    </th>\n    <td class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      {state.circulating_supply}\n    </td>\n    <td class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      {state.max_supply > 0 ? state.max_supply : \"-\"}\n    </td>\n    <td class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      {state.price} Ξ\n    </td>\n    <td class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      {state.total_earnings} Ξ\n    </td>\n    <td class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      {new Date().toLocaleDateString()}\n    </td>\n    <td class=\"text-white\" style={{ verticalAlign: \"middle\" }}>\n      <div class=\"d-flex\">\n        <button\n          onClick={() => {\n            clipboard.writeText(`<iframe src=\"https://ethglobal.knwtechs.com/#/knwtechs.near/widget/Integration.subscribe?collectionAddress=${state.collectionAddress}&sender=<here_your_customer_address>\"\n            />`);\n          }}\n          class=\"btn btn-sm btn-secondary\"\n        >\n          Subscribe iframe\n        </button>\n        <div style={{ marginLeft: \"1vw\" }} />\n        <button\n          onClick={() => {\n            clipboard.writeText(`<iframe src=\"https://ethglobal.knwtechs.com/#/knwtechs.near/widget/Integration.renew?collectionAddress=${state.collectionAddress}&tier=<optional>\"\n            />`);\n          }}\n          class=\"btn btn-sm btn-secondary\"\n        >\n          Renew iframe\n        </button>\n      </div>\n    </td>\n  </tr>\n);\n"
    },
    "Customer/widget/token": {
      "code": "const USER = \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd\";\n\nif (!props.collectionAddress || !props.abi || !props.owner)\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: \"Missing data\" }}\n    />\n  );\n\nconst tier = props.tier ?? 0;\n\nState.init({\n  name: \"\",\n  image: \"\",\n  amount: 0,\n  price: 0,\n  deadline: 0,\n  totalPaid: 0,\n});\n\nconst iface = new ethers.utils.Interface(props.abi);\n\nconst timestampToDateTime = (timestampInSeconds) => {\n  const timestampInMillis = timestampInSeconds * 1000;\n  const date = new Date(timestampInMillis);\n  return date.toLocaleString();\n};\n\nconst getCollectionName = () => {\n  const encodedData = iface.encodeFunctionData(\"collectionName\", []);\n\n  return Ethers.provider()\n    .call({\n      to: props.collectionAddress,\n      data: encodedData,\n    })\n    .then((n) => {\n      const name = iface.decodeFunctionResult(\"collectionName\", n)[0];\n      State.update({ name: name });\n    });\n};\n\nconst getCollectionImage = () => {\n  try {\n    const encodedData = iface.encodeFunctionData(\"uri\", [0]);\n\n    return Ethers.provider()\n      .call({\n        to: props.collectionAddress,\n        data: encodedData,\n      })\n      .then((url) => {\n        const uri = iface.decodeFunctionResult(\"uri\", url);\n        const real_uri = uri[0].slice(0, uri[0].length - 1);\n        const metas = fetch(real_uri);\n        if (metas.ok) {\n          const jsonmeta = JSON.parse(metas.body);\n          State.update({ image: jsonmeta[\"image\"] });\n        }\n      });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getPrice = () => {\n  const encodedData = iface.encodeFunctionData(\"getTierPrice\", [tier]);\n\n  return Ethers.provider()\n    .call({\n      to: props.collectionAddress,\n      data: encodedData,\n    })\n    .then((p) => {\n      const price = iface.decodeFunctionResult(\"getTierPrice\", p);\n      const _price = Big(price.toString()).div(Big(10).pow(18)).toString();\n      State.update({ price: _price });\n    });\n};\n\nconst getAmount = () => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [\n    props.owner,\n    tier,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: props.collectionAddress,\n      data: encodedData,\n    })\n    .then((amt) => {\n      const amount = iface.decodeFunctionResult(\"balanceOf\", amt);\n      State.update({ amount: amount.toString() });\n    });\n};\n\nconst getDeadline = () => {\n  const encodedData = iface.encodeFunctionData(\"getSubscriptionDeadline\", [\n    tier,\n    props.owner,\n  ]);\n\n  return Ethers.provider()\n    .call({\n      to: props.collectionAddress,\n      data: encodedData,\n    })\n    .then((ts) => {\n      const dl = iface.decodeFunctionResult(\"getSubscriptionDeadline\", ts);\n      const deadline = timestampToDateTime(dl.toString());\n      State.update({ deadline: deadline });\n    });\n};\n\nconst getTotalEarnings = () => {\n  const tierValue = 0;\n  const tierHex = \"0x\" + tierValue.toString(16).padStart(64, \"0\");\n  const filter = {\n    address: props.collectionAddress,\n    topics: [\n      ethers.utils.id(\"SubscriptionUpdate(uint256,address,uint256)\"),\n      tierHex,\n      ethers.utils.hexZeroPad(ethers.utils.getAddress(props.owner), 32),\n    ],\n    fromBlock: 0,\n    toBlock: \"latest\",\n  };\n  Ethers.provider()\n    .getLogs(filter)\n    .then((logs) => {\n      const tot = state.price * logs.length;\n      State.update({ totalPaid: tot });\n    })\n    .catch((err) => console.log(err));\n};\n\nconst fetchData = () => {\n  getCollectionName();\n  getCollectionImage();\n  getPrice();\n  getAmount();\n  getDeadline();\n  getTotalEarnings();\n};\n\nfetchData();\n\nreturn (\n  <div class=\"card bg-light mb-3 d-flex w-100\">\n    <div class=\"card-header text-center\">\n      <img src={state.image} class=\"img-fluid\" />\n    </div>\n    <ul class=\"list-group list-group-flush\">\n      <li class=\"list-group-item\">\n        <i>Amount</i>: {state.amount}\n      </li>\n      <li class=\"list-group-item\">\n        <i>Price</i>: {state.price} Ξ\n      </li>\n      <li class=\"list-group-item\">\n        <i>Total paid</i>: {state.totalPaid} Ξ\n      </li>\n      <li class=\"list-group-item\">\n        <i>Next billing</i>: {state.deadline}\n      </li>\n    </ul>\n    <div class=\"card-body\">\n      <h5 class=\"card-title text-center\">{state.name}</h5>\n    </div>\n  </div>\n);\n"
    },
    "Customer/widget/view": {
      "code": "const USER = \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd\";\n\nif (!Ethers.provider() || !props.sender) {\n  return (\n    <div class=\"row d-flex justify-content-center pt-4\">\n      <div class=\"col-8 col-md-4 text-center\">\n        <Web3Connect connectLabel=\"Connect with Web3\" />\n      </div>\n    </div>\n  );\n}\n\nif (!props.factory) {\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: \"Factory address missing.\" }}\n    />\n  );\n}\n\nconst collectionABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsCollection.sol/SubscriptionsCollection.json\"\n);\n\nif (!collectionABI.ok) {\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: \"Collection ABI unavailable.\" }}\n    />\n  );\n}\n\nconst factoryABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsFactory.sol/SubscriptionsFactory.json\"\n);\n\nif (!factoryABI.ok) {\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: \"Factory ABI unavailable.\" }}\n    />\n  );\n}\nconst factoryAddress = props.factory;\n\nconst subscriptionsFactoryContract = new ethers.Contract(\n  factoryAddress,\n  JSON.parse(factoryABI.body)[\"abi\"],\n  Ethers.provider().getSigner()\n);\n\nState.init({\n  widgets: [],\n});\n\nconst getSubscriptionEvents = (user) => {\n  const filter = {\n    address: factoryAddress,\n    topics: [\n      ethers.utils.id(\"NewSubscription(address,address,uint256)\"),\n      null,\n      ethers.utils.hexZeroPad(ethers.utils.getAddress(user), 32),\n    ],\n    fromBlock: 0,\n    toBlock: \"latest\",\n  };\n\n  Ethers.provider()\n    .getLogs(filter)\n    .then((logs) => {\n      const widgets = [];\n      for (let i = 0; i < logs.length; i++) {\n        const parsedLog = subscriptionsFactoryContract.interface.parseLog(\n          logs[i]\n        );\n        widgets.push(\n          <Widget\n            src={`${USER}/widget/Customer.token`}\n            props={{\n              collectionAddress: parsedLog.args[0],\n              abi: JSON.parse(collectionABI.body)[\"abi\"],\n              owner: props.sender,\n            }}\n          />\n        );\n      }\n      State.update({ widgets: widgets });\n    })\n    .catch((err) => console.log(err));\n};\n\ngetSubscriptionEvents(props.sender);\n\nreturn (\n  <div class=\"container-fluid bg-dark h-100\">\n    <div class=\"row d-flex justify-content-center mt-2\">\n      {state.widgets.map((w) => (\n        <div class=\"col-10 col-md-4 mt-2\">{w}</div>\n      ))}\n    </div>\n  </div>\n);\n"
    },
    "Integrations/widget/error": {
      "code": "return (\n    <div class=\"row justify-content-center d-flex py-3\">\n      <div class=\"col-10 col-md-4 text-center\">\n        <span class=\"alert alert-danger\">\n          <b>Error</b>: {props.message ?? \"An error occurred.\"}\n        </span>\n      </div>\n    </div>\n  );\n  "
    },
    "Integrations/widget/menu": {
      "code": "const USER = \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd\";\nreturn (\n  <div class=\"navbar navbar-dark navbar-expand-lg bg-dark px-3\">\n    <a\n      class=\"navbar-brand text-white\"\n      style={{ fontWeight: 700, textTransform: \"uppercase\" }}\n    >\n      <img\n        src=\"https://www.knwtechs.com/_next/static/media/knw.39a87d22.png\"\n        width=\"40\"\n        height=\"40\"\n        class=\"d-inline-block align-top\"\n        alt=\"KNW Technologies FZCO\"\n      />\n      {APP_TITLE}\n    </a>\n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarSupportedContent\"\n      aria-controls=\"navbarSupportedContent\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav mr-auto\">\n        <li class=\"nav-item active\">\n          <a\n            class=\"nav-link text-light text-capitalize\"\n            style={{ fontWeight: 700 }}\n            href={`#/${USER}/widget/Main.create`}\n          >\n            Create\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link text-light text-capitalize\"\n            style={{ fontWeight: 700 }}\n            href={`#/${USER}/widget/Main.manage`}\n          >\n            Manage\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link text-white\"\n            style={{ fontWeight: 700 }}\n            href={`#/${USER}/widget/Main.view`}\n            tabindex=\"-1\"\n          >\n            View\n          </a>\n        </li>\n      </ul>\n    </div>\n    <div\n      class=\"d-flex justify-content-between align-items-center\"\n      style={{ minWidth: \"18vw\" }}\n    >\n      {props.balance && <a class=\"nav-link text-white\">{props.balance} Ξ</a>}\n      <Web3Connect connectLabel=\"Connect with Web3\" />\n    </div>\n  </div>\n);\n"
    },
    "Integrations/widget/footer": {
      "code": "const Footer = styled.div`\nwidth: 100%;\ntext-align: center;\nbackground-color: #343a40;\nalign-items: center;\ndisplay: flex;\nflex-direction: column;\nmargin-top: auto\n`;\nconst HorizontalLine = styled.hr`\nwidth: 100%;\nborder: none;\nborder-top: 1px solid #fff;\n`;\nconst FooterText = styled.p`\nfont-size: 14px;\ncolor: #fff;\n`;\n\nreturn (\n  <Footer>\n    <HorizontalLine />\n    <FooterText>Made with &#x2665; by KNW Technologies FZCO</FooterText>\n  </Footer>\n);\n"
    },
    "Main/widget/create": {
      "code": "const USER = \"knwtechs.near\";\n\nconst factoryAddress = \"0x0aBeC91137108C54bdfA2B909E0EC529ECd99429\";\n\nconst Container = styled.div`\nmin-height: 100vh;\nbackground-color: #1c1f2a;\nmargin: 0;\ndisplay: flex;\nflex-direction: column;\nmin-height: 100vh;\n`;\n\n// CHECK FOR SEPOLIA NETWORK\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Sepolia</p>;\n}\n\n// CHECK FOR WALLET CONNECTION\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\nconst css = fetch(\n  \"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\"\n);\nif (!css.ok)\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: `CSS_FETCH ${css.error}` }}\n    />\n  );\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n${css.body}\n`,\n  });\n}\nconst Theme = state.theme;\n\nreturn (\n  <Theme>\n    <Container>\n      <Widget\n        src={`${USER}/widget/Common.menu`}\n        props={{ balance: state.balance }}\n      />\n      <Widget\n        src={`${USER}/widget/Merchant.create`}\n        props={{ factory: factoryAddress, sender: state.sender }}\n      />\n      <Widget src={`${USER}/widget/Common.footer`} />\n    </Container>\n  </Theme>\n);\n"
    },
    "Main/widget/manage": {
      "code": "const USER = \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd\";\n\nconst factoryAddress = \"0x0aBeC91137108C54bdfA2B909E0EC529ECd99429\";\n\nconst Container = styled.div`\nmin-height: 100vh;\nbackground-color: #1c1f2a;\nmargin: 0;\ndisplay: flex;\nflex-direction: column;\nmin-height: 100vh;\n`;\n\nState.init({\n  page: \"create\",\n});\n\n// CHECK FOR SEPOLIA NETWORK\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Sepolia</p>;\n}\n\n// CHECK FOR WALLET CONNECTION\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\nconst css = fetch(\n  \"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\"\n);\nif (!css.ok)\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: `CSS_FETCH ${css.error}` }}\n    />\n  );\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n${css.body}\n`,\n  });\n}\nconst Theme = state.theme;\n\nreturn (\n  <Theme>\n    <Container>\n      <Widget\n        src={`${USER}/widget/Common.menu`}\n        props={{ balance: state.balance }}\n      />\n      <h3 class=\"text-white text-center pt-5\"> Manage your products</h3>\n      <Widget\n        src={`${USER}/widget/Merchant.view`}\n        props={{ merchant: state.sender, factory: factoryAddress }}\n      />\n      <Widget src={`${USER}/widget/Common.footer`} />\n    </Container>\n  </Theme>\n);\n"
    },
    "Main/widget/view": {
      "code": "const USER = \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd\";\n\nconst factoryAddress = \"0x0aBeC91137108C54bdfA2B909E0EC529ECd99429\";\n\nconst Container = styled.div`\nmin-height: 100vh;\nbackground-color: #1c1f2a;\nmargin: 0;\ndisplay: flex;\nflex-direction: column;\nmin-height: 100vh;\n`;\n\nState.init({\n  page: \"create\",\n});\n\n// CHECK FOR SEPOLIA NETWORK\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 11155111) {\n  return <p>Switch to Sepolia</p>;\n}\n\n// CHECK FOR WALLET CONNECTION\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  }\n}\n\n// FETCH SENDER BALANCE\nif (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\nconst css = fetch(\n  \"https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css\"\n);\nif (!css.ok)\n  return (\n    <Widget\n      src={`${USER}/widget/Common.error`}\n      props={{ message: `CSS_FETCH ${css.error}` }}\n    />\n  );\n\nif (!state.theme) {\n  State.update({\n    theme: styled.div`\n${css.body}\n`,\n  });\n}\nconst Theme = state.theme;\n\nreturn (\n  <Theme>\n    <Container>\n      <Widget\n        src={`${USER}/widget/Common.menu`}\n        props={{ balance: state.balance }}\n      />\n      <h3 class=\"text-white text-center pt-5\"> Your subscriptions</h3>\n\n      <Widget\n        src={`${USER}/widget/Customer.view`}\n        props={{\n          factory: factoryAddress,\n          sender: state.sender,\n        }}\n      />\n      <Widget src={`${USER}/widget/Common.footer`} />\n    </Container>\n  </Theme>\n);\n"
    },
    "Integrations/widget/renew": {
      "code": "// PROPS\nif (!props.collectionAddress)\n  return (\n    <Widget\n      src={\n        \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd/widget/Common.error\"\n      }\n      props={{ message: \"`collectionAddress` undefined.\" }}\n    />\n  );\nconst tier = Big(props.tier ?? 0).toString();\nconst style = props.style ?? {\n  backgroundColor: \"blue\",\n  fontWeight: 500,\n  minWidth: \"10vw\",\n  textTransform: \"capitalize\",\n};\n\nState.init({\n  loading: false,\n});\n\n// CHECK FOR WALLET CONNECTION\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  } else {\n    return (\n      <Widget\n        src={\n          \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd/widget/Common.error\"\n        }\n        props={{ message: \"Please login first.\" }}\n      />\n    );\n  }\n}\n\n// CONTRACT INSTANCE\nconst collectionABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsCollection.sol/SubscriptionsCollection.json\"\n);\nif (!collectionABI.ok) {\n  return \"Contract unavailable.\";\n}\n\nconst subscriptionsCollectionContract = new ethers.Contract(\n  props.collectionAddress,\n  JSON.parse(collectionABI.body)[\"abi\"],\n  Ethers.provider().getSigner()\n);\n\nsubscriptionsCollectionContract\n  .getTierPrice(tier)\n  .then((price) => State.update({ price: price.toString() }));\n\nconst subscribe = () => {\n  console.log({\n    to: state.sender,\n    tier,\n    price: state.price,\n  });\n\n  try {\n    State.update({ loading: true });\n    subscriptionsCollectionContract\n      .renewSubscription(tier, {\n        value: state.price,\n      })\n      .catch((err) => {\n        State.update({ loading: false });\n        console.log(err);\n      })\n      .then((tx) => {\n        console.log(\"Waiting for confirmation: \", tx);\n        tx.wait().then((receipt) => {\n          console.log(\"TX Confirmed: \", receipt);\n          State.update({ loading: false });\n        });\n      });\n  } catch (err) {\n    State.update({ loading: false });\n    console.log(err);\n  }\n};\n\nreturn (\n  <>\n    <button\n      style={style}\n      onClick={subscribe}\n      id={props.id ?? \"subscribeButton\"}\n    >\n      {state.loading ? (\n        <div class=\"spinner-border text-light\" role=\"status\"></div>\n      ) : (\n        \"renew\"\n      )}\n    </button>\n  </>\n);\n"
    },
    "Integrations/widget/subscribe": {
      "code": "const factoryAddress = \"0x0aBeC91137108C54bdfA2B909E0EC529ECd99429\";\n\n// PROPS\nif (!props.collectionAddress)\n  return (\n    <Widget\n      src={\n        \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd/widget/Common.error\"\n      }\n      props={{ message: \"`collectionAddress` undefined.\" }}\n    />\n  );\nconst tier = Big(props.tier ?? 0).toString();\nconst style = props.style ?? {\n  backgroundColor: \"blue\",\n  fontWeight: 500,\n  minWidth: \"10vw\",\n};\n\nState.init({\n  loading: false,\n});\n\n// CHECK FOR WALLET CONNECTION\nif (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n  } else {\n    return (\n      <Widget\n        src={\n          \"4ac12ee4ebd5536d7b130a9c5f8eebb1136145312c9e523289bf346268aeebfd/widget/Common.error\"\n        }\n        props={{ message: \"Please login first.\" }}\n      />\n    );\n  }\n}\n\n// CONTRACT INSTANCE\nconst factoryABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsFactory.sol/SubscriptionsFactory.json\"\n);\nif (!factoryABI.ok) {\n  return \"Contract unavailable.\";\n}\n\nconst collectionABI = fetch(\n  \"https://raw.githubusercontent.com/knwtechs/subscript.io-contracts/main/artifacts/contracts/SubscriptionsCollection.sol/SubscriptionsCollection.json\"\n);\nif (!collectionABI.ok) {\n  return \"Contract unavailable.\";\n}\n\nconst subscriptionsFactoryContract = new ethers.Contract(\n  factoryAddress,\n  JSON.parse(factoryABI.body)[\"abi\"],\n  Ethers.provider().getSigner()\n);\nconst subscriptionsCollectionContract = new ethers.Contract(\n  props.collectionAddress,\n  JSON.parse(collectionABI.body)[\"abi\"],\n  Ethers.provider().getSigner()\n);\n\nsubscriptionsCollectionContract\n  .getTierPrice(tier)\n  .then((price) => State.update({ price: price.toString() }));\n\nconst subscribe = () => {\n  console.log({\n    to: state.sender,\n    tier,\n    price: state.price,\n  });\n\n  try {\n    State.update({ loading: true });\n    subscriptionsFactoryContract\n      .subscribe(props.collectionAddress, state.sender, tier, {\n        value: state.price,\n      })\n      .catch((err) => {\n        State.update({ loading: false });\n        console.log(err);\n      })\n      .then((tx) => {\n        console.log(\"Waiting for confirmation: \", tx);\n        tx.wait().then((receipt) => {\n          console.log(\"TX Confirmed: \", receipt);\n          State.update({ loading: false });\n        });\n      });\n  } catch (err) {\n    State.update({ loading: false });\n    console.log(err);\n  }\n};\n\nreturn (\n  <>\n    <button\n      style={style}\n      onClick={subscribe}\n      id={props.id ?? \"subscribeButton\"}\n    >\n      {state.loading ? (\n        <div class=\"spinner-border text-light\" role=\"status\"></div>\n      ) : (\n        \"Subscribe\"\n      )}\n    </button>\n  </>\n);\n"
    }
  }
}